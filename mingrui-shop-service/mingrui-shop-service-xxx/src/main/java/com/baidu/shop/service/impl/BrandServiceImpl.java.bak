package com.baidu.shop.service.impl;

import com.alibaba.fastjson.JSONObject;
import com.baidu.shop.base.BaseApiService;
import com.baidu.shop.base.Result;
import com.baidu.shop.dto.BrandDTO;
import com.baidu.shop.entity.BrandEntity;
import com.baidu.shop.entity.CategoryBrandEntity;
import com.baidu.shop.mapper.BrandMapper;
import com.baidu.shop.mapper.CategoryBrandMapper;
import com.baidu.shop.service.BrandService;
import com.baidu.shop.utils.BaiduBeanUtil;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RestController;
import tk.mybatis.mapper.entity.Example;
import org.springframework.util.StringUtils;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

/**
 * @ClassName BrandServiceImpl
 * @Description: TODO
 * @Author wangyanjun
 * @Date 2020/12/25
 * @Version V1.0
 **/
@RestController
public class BrandServiceImpl extends BaseApiService implements BrandService {

    @Autowired
    private BrandMapper brandMapper;

    @Autowired
    private CategoryBrandMapper categoryBrandMapper;

    @Override
    public Result<PageInfo<BrandEntity>> getBrandData(BrandDTO brandDTO) {
        // 分页
        PageHelper.startPage(brandDTO.getPage(), brandDTO.getRows());

        // 排序
        if (!StringUtils.isEmpty(brandDTO.getSort())) PageHelper.orderBy(brandDTO.getOrderBy());

        BrandEntity brandEntity = BaiduBeanUtil.copyProperties(brandDTO, BrandEntity.class);

        Example example = new Example(BrandEntity.class);

        example.createCriteria().andLike("name", "%" + brandEntity.getName() + "%");

        List<BrandEntity> brandEntities = brandMapper.selectByExample(example);
        PageInfo<BrandEntity> pageInfo = new PageInfo<>(brandEntities);

        return this.setResultSuccess(pageInfo);
    }

    @Transactional
    @Override
    public Result<JSONObject> saveBrandInfo(BrandDTO brandDTO) {
        BrandEntity brandEntity = BaiduBeanUtil.copyProperties(brandDTO, BrandEntity.class);
        brandMapper.insertSelective(brandEntity);
        //维护中间表数据
        String categories = brandDTO.getCategories();//得到分类集合字符串
        if (StringUtils.isEmpty(brandDTO.getCategories())) return this.setResultError("");
        //List<CategoryBrandEntity> categoryBrandEntities = new ArrayList<>();

        if (categories.contains(",")) {//多个分类 --> 批量新增

           /*
            String[] categoryArr = categories.split(",");
            for (String s : categoryArr) {
                CategoryBrandEntity categoryBrandEntity = new CategoryBrandEntity();
                categoryBrandEntity.setBrandId(brandEntity.getId());
                categoryBrandEntity.setCategoryId(Integer.valueOf(s));
                categoryBrandEntities.add(categoryBrandEntity);
            }
            // InsertListMapper
           // categoryBrandMapper.insertList(categoryBrandEntities);
           */

            //String[] categoryArr = categories.split(",");
            /*List<String> strings = new ArrayList<>();
            for (String str : categoryArr) {
                strings.add(str);
            }*/

            /*
             List<String> list = Arrays.asList(categoryArr);
            List<CategoryBrandEntity> categoryBrandEntityList = list.stream().map(categoryIdStr -> {

                CategoryBrandEntity categoryBrandEntity = new CategoryBrandEntity();

                categoryBrandEntity.setCategoryId(Integer.valueOf(categoryIdStr));

                categoryBrandEntity.setBrandId(brandEntity.getId());

                return categoryBrandEntity;

            }).collect(Collectors.toList());

            categoryBrandMapper.insertList(categoryBrandEntityList);
            // 下面是升级版

           // categoryBrandMapper.insertList(Arrays.asList(categoryArr).stream().map(categoryIdStr -> {

                CategoryBrandEntity categoryBrandEntity = new CategoryBrandEntity();

                categoryBrandEntity.setCategoryId(Integer.valueOf(categoryIdStr));

                categoryBrandEntity.setBrandId(brandEntity.getId());

                return categoryBrandEntity;

            }).collect(Collectors.toList()));\\

            * */


            categoryBrandMapper.insertList(
                    Arrays.asList(categories.split(","))
                            .stream()
                            .map(categoryIdStr -> new CategoryBrandEntity(Integer.valueOf(categoryIdStr),brandEntity.getId()))
                            .collect(Collectors.toList()));


        } else {
            CategoryBrandEntity categoryBrandEntity = new CategoryBrandEntity();
            categoryBrandEntity.setBrandId(brandEntity.getId());
            categoryBrandEntity.setCategoryId(Integer.valueOf(categories));

            categoryBrandMapper.insert(categoryBrandEntity);
        }


        return this.setResultSuccess();
    }


}
